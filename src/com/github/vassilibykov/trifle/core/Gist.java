// Copyright (c) 2018 Vassili Bykov. Licensed under the Apache License, Version 2.0.

package com.github.vassilibykov.trifle.core;

import static com.github.vassilibykov.trifle.core.JvmType.BOOL;
import static com.github.vassilibykov.trifle.core.JvmType.INT;
import static com.github.vassilibykov.trifle.core.JvmType.REFERENCE;
import static com.github.vassilibykov.trifle.core.JvmType.VOID;

/**
 * Describes the behavior of a code fragment generated by a {@link
 * CodeGenerator}: the {@link JvmType} of the value it leaves on the stack and
 * whether the fragment evaluation can result in a {@link SquarePegException}
 * because of a specialization failure.
 *
 * <p>Keeping track of fallibility as a characteristic independent of the result
 * type is the key to generating SPE handlers only when necessary.
 */
public enum Gist {

    INFALLIBLE_INT(INT, false),
    INFALLIBLE_BOOL(BOOL, false),
    INFALLIBLE_REFERENCE(REFERENCE, false),
    INFALLIBLE_VOID(VOID, false),
    FALLIBLE_INT(INT, true),
    FALLIBLE_BOOL(BOOL, true),
    FALLIBLE_REFERENCE(REFERENCE, true),
    FALLIBLE_VOID(VOID, true);

    public static Gist infallible(JvmType type) {
        return Gist.of(type, false);
    }

    public static Gist of(JvmType type, boolean canFail) {
        return type.match(new JvmType.Matcher<>() {
            @Override
            public Gist ifReference() {
                return canFail ? FALLIBLE_REFERENCE : INFALLIBLE_REFERENCE;
            }

            @Override
            public Gist ifInt() {
                return canFail ? FALLIBLE_INT : INFALLIBLE_INT;
            }

            @Override
            public Gist ifBoolean() {
                return canFail ? FALLIBLE_BOOL : INFALLIBLE_BOOL;
            }

            @Override
            public Gist ifVoid() {
                return canFail ? FALLIBLE_VOID : INFALLIBLE_VOID;
            }
        });
    }

    /*
        Instance
     */

    private final JvmType type;
    private final boolean canFail;

    Gist(JvmType type, boolean canFail) {
        this.type = type;
        this.canFail = canFail;
    }

    public JvmType type() {
        return type;
    }

    public boolean canFail() {
        return canFail;
    }
}
